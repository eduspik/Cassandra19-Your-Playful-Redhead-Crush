import React from 'react';
import { Message } from '../types';

interface ChatMessageProps {
  message: Message;
  onImageClick: (imageUrl: string) => void;
}

const ChatMessage: React.FC<ChatMessageProps> = ({ message, onImageClick }) => {
  const isModel = message.role === 'model';

  // Función para encontrar y formatear URLs, texto en negrita (**texto**) y el enlace específico de Fanvue.
  const formatContent = (text: string) => {
    // La expresión regular divide el texto por URLs, texto en negrita o el enlace de fanvue (con o sin 'www.'),
    // pero mantiene los delimitadores en el array resultante gracias a los paréntesis de captura.
    const parts = text.split(/(\*\*.+?\*\*|https?:\/\/[^\s.,!?]+|(?:www\.)?fanvue\.com\/cassandra19)/gi);

    return parts
      // Filtra cualquier cadena vacía que pueda resultar de la división.
      .filter(part => part)
      .map((part, index) => {
        // Comprueba si la parte es una URL completa.
        if (/^https?:\/\//.test(part)) {
          return (
            <a
              key={index}
              href={part}
              target="_blank"
              rel="noopener noreferrer"
              className="text-purple-400 hover:underline"
            >
              {part}
            </a>
          );
        }
        // Comprueba si la parte es el enlace de Fanvue, con o sin 'www.'.
        if (/^(?:www\.)?fanvue\.com\/cassandra19$/i.test(part)) {
            return (
              <a
                key={index}
                href="https://www.fanvue.com/cassandra19"
                target="_blank"
                rel="noopener noreferrer"
                className="text-purple-400 hover:underline"
              >
                {part}
              </a>
            );
        }
        // Comprueba si la parte es texto en negrita.
        if (part.startsWith('**') && part.endsWith('**')) {
          // Extrae el texto de entre los asteriscos para ponerlo en negrita.
          return <strong key={index}>{part.substring(2, part.length - 2)}</strong>;
        }
        // Si no es ninguno de los anteriores, es texto normal.
        return part;
      });
  };

  return (
    <div className={`flex items-end ${isModel ? 'justify-start' : 'justify-end'}`}>
      <div
        className={`rounded-2xl max-w-lg lg:max-w-xl xl:max-w-2xl break-words ${
          isModel
            ? 'bg-gray-700 text-gray-100 rounded-bl-none'
            : 'bg-purple-600 text-white rounded-br-none'
        } ${message.imageUrl && !message.content ? 'p-2 bg-transparent' : 'px-4 py-3'}`}
      >
        {message.imageUrl === 'loading' && (
           <div className="flex items-center justify-center h-48 w-48 bg-gray-600 rounded-lg animate-pulse">
             <svg className="w-10 h-10 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
            </svg>
           </div>
        )}
        {message.imageUrl && message.imageUrl !== 'loading' && (
            <button
              onClick={() => onImageClick(message.imageUrl!)}
              className="focus:outline-none transition-opacity hover:opacity-90"
              aria-label="View image larger"
            >
              <img
                src={message.imageUrl}
                alt="Generated by Cassandra"
                className="rounded-lg max-w-xs w-full cursor-pointer"
              />
            </button>
        )}
        {message.content && (
             <div className={`whitespace-pre-wrap ${message.imageUrl ? 'mt-2' : ''}`}>
                {formatContent(message.content)}
            </div>
        )}
      </div>
    </div>
  );
};

export default ChatMessage;